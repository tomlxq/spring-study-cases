<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       default-lazy-init="true">
    <!-- 应用属性文件读入 -->
    <bean id="applicationProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <!-- 标准配置 -->
                <value>classpath:/config/jdbc.properties</value>
                <!--<value>file:/c:/xxxxxx/dev.properties</value>-->
            </list>
        </property>
    </bean>
    <!-- controller层的属性和配置文件读入 ,多个用逗号隔开 <context:property-placeholder location="classpath:/config/config.properties" /> -->
    <!-- 只搜索@Controller 标注的类 不搜索其他标注的类 -->
    <context:component-scan base-package="com.tom" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>





    <!-- 用于持有applicationProperties,将properties转变为静态方法使用,PropertiesHolder.getProperty("somekey") -->

    <bean class="com.tom.common.PropertiesHolder">
        <property name="properties" ref="applicationProperties"/>
    </bean>


    <!-- PropertyPlaceholderConfigurer,用于spring ${placeholder}的解析 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="properties" ref="applicationProperties"/>
    </bean>

    <!-- 激活 @Required @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
    <context:annotation-config/>
    <!-- 对某些静态资源，如css,图片等进行过滤 ,有引用 "/resources/**" 的路径引用转到工程的/resources/目录取资源 -->
 <!--   <mvc:resources mapping="/favicon.ico" location="/favicon.ico"/>-->
    <mvc:resources mapping="/static/**" location="/static/"/> <!--存放css/js-->
    <mvc:resources mapping="/template/**" location="/template/"/> <!--存放freemarker模板-->
    <!-- 简单的地址映射 -->
    <!-- Forwards requests to the "/" resource to the "welcome" view
     <mvc:view-controller path="/admin" view-name="/admin/login" />
    -->

    <mvc:annotation-driven/>

    <!--通用视图解析器-->
    <!-- 在视图解析器中有一个<property name="order" value="orderValue"/>的配置，这个配置表示解析器的优先级别。
     我们将FreeMarkerViewResolver的级别设为0,
     将InternalResourceViewResolver的级别设为1。
     这样，解析器就会优先使用 FreeMarkerViewResolver 进行解析，
     如果找不到相应的模板，就使用InternalResourceViewResolver进行解析，
     如果还找不到页面，就会产生一个404错误-->
    <!--通用视图解析器-->
    <bean id="viewResolverCommon" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->
        <property name="viewClass">
            <value>org.springframework.web.servlet.view.InternalResourceView</value>
        </property>
        <property name="order" value="1"/>
    </bean>
    <!-- 配置freeMarker视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html;charset=UTF-8"></property>
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="requestContextAttribute" value="request"></property>
        <!-- 上下文，这里配置之后，fkt文件中可以使用${rc.getContextPath()} 来获取文件上下文，类似jsp的request.getContextPath() -->
        <property name="cache" value="true"/>
        <property name="order" value="0"/>
    </bean>
    <!-- 设置freeMarker的配置文件路径 -->
    <!--   <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
           <property name="location" value="classpath:freemarker.properties"/>
       </bean>-->
    <!-- 配置freeMarker的模板路径 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <!--<property name="freemarkerSettings" ref="freemarkerConfiguration"/>-->
        <property name="freemarkerSettings">
            <props>
                <prop key="locale">en_US</prop>
                <prop key="defaultEncoding">UTF-8</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="number_format">0.##</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="auto_import">template/public/CommonBlock.ftl as commonBlock,template/public/pager.ftl as p</prop>
                <prop key="whitespace_stripping">true</prop>
                <prop key="tag_syntax">auto_detect</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="template_exception_handler">html_debug</prop>
            </props>
        </property>
        <property name="templateLoaderPath">
            <value>/WEB-INF/template/</value>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
                <entry key="md5" value-ref="md5"/>
                <entry key="encode" value-ref="encode"/>
                <entry key="decode" value-ref="decode"/>
                <entry key="random" value-ref="random"/>
                <entry key="acceptLanguage" value-ref="acceptLanguage"/>
            </map>
        </property>

    </bean>
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>

    <bean id="md5" class="com.tom.common.freemarker.TemplateMethodModelMd5"/>
    <bean id="encode" class="com.tom.common.freemarker.TemplateMethodModelBase64Encode"/>
    <bean id="decode" class="com.tom.common.freemarker.TemplateMethodModelBase64Decode"/>
    <bean id="random" class="com.tom.common.freemarker.TemplateMethodModelRandom"/>
    <bean id="acceptLanguage" class="com.tom.common.freemarker.TemplateMethodModelLang"/>

    <mvc:interceptors>
        <bean class="com.tom.web.interceptor.AuthorityAnnotationInterceptor"></bean>
        <bean class="com.tom.web.interceptor.ClientAuthorityAnnotationInterceptor"></bean>
    </mvc:interceptors>


    <!-- 国际化,并且可以批定文件编码,可以使用classpath: 或者WEB-INF/ 前缀 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:/config/others/messages</value>
                <value>classpath:ValidationMessages</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>

    <!-- 文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 解析request的编码 ，Default is ISO-8859-1 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 设置最大允许的大小(字节)。-1表示没有限制(默认) 1024*1024*10=10MB -->
        <property name="maxUploadSize" value="1048576000"/>
        <!--被允许的最大的内存的大小，Default is 10240 bytes -->
        <property name="maxInMemorySize" value="20480"/>
        <!-- 一个类似懒加载的属性.可以定义该属性.让解析文件的时候再抛异常,然后Controller中定义异常处理的方法 -->
        <property name="resolveLazily" value="true"/>
    </bean>


    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="defaultContentType" value="text/html;charset=UTF-8" />
        <property name="mediaTypes">
            <map>
                <!--<entry key="html" value="application/x-www-form-urlencoded" />-->
                <entry key="html" value="text/html;charset=UTF-8"/>
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />
                <entry key="rss" value="application/rss+xml" />
                <entry key="atom" value="application/atom+xml"/>

            </map>
        </property>
        <property name="viewResolvers">
            <list>
                <ref bean="viewResolver"/>
                <ref bean="viewResolverCommon"/>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <bean  class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>

            </list>
        </property>
    </bean>
    <bean id="exceptionHandler" class="com.tom.web.exception.MyExceptionHandler"/>
</beans>
