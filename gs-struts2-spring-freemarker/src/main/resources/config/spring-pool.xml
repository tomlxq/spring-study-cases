<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- Spring bean configuration. Tell Spring to bounce off BoneCP -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="bonecp"/>
    </bean>
    <!-- BoneCP配置 -->
    <bean id="bonecp" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
        <property name="driverClass" value="${mysql.jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${mysql.jdbc.url}" />
        <property name="username" value="${mysql.jdbc.username}" />
        <property name="password" value="${mysql.jdbc.password}" />
        <!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
        <property name="idleConnectionTestPeriodInMinutes" value="60" />
        <!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
        <property name="idleMaxAgeInMinutes" value="30" />
        <!-- 每个分区最大的连接数 -->
        <property name="maxConnectionsPerPartition" value="60" />
        <!-- 每个分区最小的连接数 -->
        <property name="minConnectionsPerPartition" value="10" />
        <!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
        <property name="partitionCount" value="3" />
        <!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
        <property name="acquireIncrement" value="5" />
        <!-- 缓存prepared statements的大小，默认值：0 -->
        <property name="statementsCacheSize" value="100" />
        <!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
        <property name="releaseHelperThreads" value="3" />
    </bean>
    <!--   通常来说，只需要修改initialSize、minIdle、maxActive。
       如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。
       https://github.com/alibaba/druid/wiki/FAQ
       -->
    <bean id="druid" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${mysql.jdbc.url}" />
        <property name="username" value="${mysql.jdbc.username}" />
        <property name="password" value="${mysql.jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!--<bean id="druid" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
        <property name="url" value="${mysql.jdbc.url}" />
        <property name="username" value="${mysql.jdbc.username}" />
        <property name="password" value="${mysql.jdbc.password}" />

        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000" />

        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        &lt;!&ndash;保存DruidDataSource的监控记录&ndash;&gt;
        <property name="timeBetweenLogStatsMillis" value="300000" />
        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        &lt;!&ndash; 连接泄漏监测
         当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接。&ndash;&gt;
        <property name="removeAbandoned" value="true" /> &lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;
        <property name="removeAbandonedTimeout" value="1800" /> &lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;
        <property name="logAbandoned" value="true" /> &lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;
        &lt;!&ndash;
           配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。在上面的配置中，
            如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈。
           内置监控页面查看未关闭连接堆栈信息
           当removeAbandoned=true之后，可以在内置监控界面datasource.html中的查看ActiveConnection StackTrace属性的，
           可以看到未关闭连接的具体堆栈信息，从而方便查出哪些连接泄漏了。
          &ndash;&gt;
        &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
        &lt;!&ndash; <property name="filters" value="wall,stat"/>&ndash;&gt;
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                &lt;!&ndash;         <ref bean="log-filter"/>&ndash;&gt;
            </list>
        </property>
    </bean>
    &lt;!&ndash; <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
         <property name="resultSetLogEnabled" value="true" />
     </bean>&ndash;&gt;
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true" />
        <property name="slowSqlMillis" value="10000" />
        <property name="logSlowSql" value="true" />
    </bean>
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>fr.databao.service.*</value>
                <value>fr.databao.dao.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut" />
    </aop:config>-->

</beans>